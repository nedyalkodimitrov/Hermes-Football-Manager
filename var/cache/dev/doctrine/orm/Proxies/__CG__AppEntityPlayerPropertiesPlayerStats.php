<?php

namespace Proxies\__CG__\App\Entity\PlayerProperties;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class PlayerStats extends \App\Entity\PlayerProperties\PlayerStats implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\PlayerProperties\\PlayerStats' . "\0" . 'id', '' . "\0" . 'App\\Entity\\PlayerProperties\\PlayerStats' . "\0" . 'player', '' . "\0" . 'App\\Entity\\PlayerProperties\\PlayerStats' . "\0" . 'statusFromCoaches', '' . "\0" . 'App\\Entity\\PlayerProperties\\PlayerStats' . "\0" . 'weight', '' . "\0" . 'App\\Entity\\PlayerProperties\\PlayerStats' . "\0" . 'height', '' . "\0" . 'App\\Entity\\PlayerProperties\\PlayerStats' . "\0" . 'fat', '' . "\0" . 'App\\Entity\\PlayerProperties\\PlayerStats' . "\0" . 'pace', '' . "\0" . 'App\\Entity\\PlayerProperties\\PlayerStats' . "\0" . 'tacticks', '' . "\0" . 'App\\Entity\\PlayerProperties\\PlayerStats' . "\0" . 'technique', '' . "\0" . 'App\\Entity\\PlayerProperties\\PlayerStats' . "\0" . 'pass', '' . "\0" . 'App\\Entity\\PlayerProperties\\PlayerStats' . "\0" . 'shot', '' . "\0" . 'App\\Entity\\PlayerProperties\\PlayerStats' . "\0" . 'dribble', '' . "\0" . 'App\\Entity\\PlayerProperties\\PlayerStats' . "\0" . 'longPass', '' . "\0" . 'App\\Entity\\PlayerProperties\\PlayerStats' . "\0" . 'relax', '' . "\0" . 'App\\Entity\\PlayerProperties\\PlayerStats' . "\0" . 'willpower', '' . "\0" . 'App\\Entity\\PlayerProperties\\PlayerStats' . "\0" . 'work', '' . "\0" . 'App\\Entity\\PlayerProperties\\PlayerStats' . "\0" . 'perspective'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\PlayerProperties\\PlayerStats' . "\0" . 'id', '' . "\0" . 'App\\Entity\\PlayerProperties\\PlayerStats' . "\0" . 'player', '' . "\0" . 'App\\Entity\\PlayerProperties\\PlayerStats' . "\0" . 'statusFromCoaches', '' . "\0" . 'App\\Entity\\PlayerProperties\\PlayerStats' . "\0" . 'weight', '' . "\0" . 'App\\Entity\\PlayerProperties\\PlayerStats' . "\0" . 'height', '' . "\0" . 'App\\Entity\\PlayerProperties\\PlayerStats' . "\0" . 'fat', '' . "\0" . 'App\\Entity\\PlayerProperties\\PlayerStats' . "\0" . 'pace', '' . "\0" . 'App\\Entity\\PlayerProperties\\PlayerStats' . "\0" . 'tacticks', '' . "\0" . 'App\\Entity\\PlayerProperties\\PlayerStats' . "\0" . 'technique', '' . "\0" . 'App\\Entity\\PlayerProperties\\PlayerStats' . "\0" . 'pass', '' . "\0" . 'App\\Entity\\PlayerProperties\\PlayerStats' . "\0" . 'shot', '' . "\0" . 'App\\Entity\\PlayerProperties\\PlayerStats' . "\0" . 'dribble', '' . "\0" . 'App\\Entity\\PlayerProperties\\PlayerStats' . "\0" . 'longPass', '' . "\0" . 'App\\Entity\\PlayerProperties\\PlayerStats' . "\0" . 'relax', '' . "\0" . 'App\\Entity\\PlayerProperties\\PlayerStats' . "\0" . 'willpower', '' . "\0" . 'App\\Entity\\PlayerProperties\\PlayerStats' . "\0" . 'work', '' . "\0" . 'App\\Entity\\PlayerProperties\\PlayerStats' . "\0" . 'perspective'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (PlayerStats $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getPlayer()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPlayer', []);

        return parent::getPlayer();
    }

    /**
     * {@inheritDoc}
     */
    public function setPlayer($player): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPlayer', [$player]);

        parent::setPlayer($player);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatusFromCoaches(): ?float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatusFromCoaches', []);

        return parent::getStatusFromCoaches();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatusFromCoaches(float $statusFromCoaches): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatusFromCoaches', [$statusFromCoaches]);

        parent::setStatusFromCoaches($statusFromCoaches);
    }

    /**
     * {@inheritDoc}
     */
    public function getWeight(): ?float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWeight', []);

        return parent::getWeight();
    }

    /**
     * {@inheritDoc}
     */
    public function setWeight(float $weight): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setWeight', [$weight]);

        parent::setWeight($weight);
    }

    /**
     * {@inheritDoc}
     */
    public function getHeight(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHeight', []);

        return parent::getHeight();
    }

    /**
     * {@inheritDoc}
     */
    public function setHeight(int $height): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHeight', [$height]);

        parent::setHeight($height);
    }

    /**
     * {@inheritDoc}
     */
    public function getFat(): ?float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFat', []);

        return parent::getFat();
    }

    /**
     * {@inheritDoc}
     */
    public function setFat(float $fat): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFat', [$fat]);

        parent::setFat($fat);
    }

    /**
     * {@inheritDoc}
     */
    public function getPace(): ?float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPace', []);

        return parent::getPace();
    }

    /**
     * {@inheritDoc}
     */
    public function setPace(float $pace): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPace', [$pace]);

        parent::setPace($pace);
    }

    /**
     * {@inheritDoc}
     */
    public function getTacticks(): ?float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTacticks', []);

        return parent::getTacticks();
    }

    /**
     * {@inheritDoc}
     */
    public function setTacticks(float $tacticks): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTacticks', [$tacticks]);

        parent::setTacticks($tacticks);
    }

    /**
     * {@inheritDoc}
     */
    public function getTechnique(): ?float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTechnique', []);

        return parent::getTechnique();
    }

    /**
     * {@inheritDoc}
     */
    public function setTechnique(float $technique): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTechnique', [$technique]);

        parent::setTechnique($technique);
    }

    /**
     * {@inheritDoc}
     */
    public function getPass(): ?float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPass', []);

        return parent::getPass();
    }

    /**
     * {@inheritDoc}
     */
    public function setPass(float $pass): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPass', [$pass]);

        parent::setPass($pass);
    }

    /**
     * {@inheritDoc}
     */
    public function getShot(): ?float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getShot', []);

        return parent::getShot();
    }

    /**
     * {@inheritDoc}
     */
    public function setShot(float $shot): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setShot', [$shot]);

        parent::setShot($shot);
    }

    /**
     * {@inheritDoc}
     */
    public function getDribble(): ?float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDribble', []);

        return parent::getDribble();
    }

    /**
     * {@inheritDoc}
     */
    public function setDribble(float $dribble): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDribble', [$dribble]);

        parent::setDribble($dribble);
    }

    /**
     * {@inheritDoc}
     */
    public function getLongPass(): ?float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLongPass', []);

        return parent::getLongPass();
    }

    /**
     * {@inheritDoc}
     */
    public function setLongPass(float $longPass): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLongPass', [$longPass]);

        parent::setLongPass($longPass);
    }

    /**
     * {@inheritDoc}
     */
    public function getRelax(): ?float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRelax', []);

        return parent::getRelax();
    }

    /**
     * {@inheritDoc}
     */
    public function setRelax(float $relax): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRelax', [$relax]);

        parent::setRelax($relax);
    }

    /**
     * {@inheritDoc}
     */
    public function getWillpower(): ?float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWillpower', []);

        return parent::getWillpower();
    }

    /**
     * {@inheritDoc}
     */
    public function setWillpower(float $willpower): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setWillpower', [$willpower]);

        parent::setWillpower($willpower);
    }

    /**
     * {@inheritDoc}
     */
    public function getWork(): ?float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWork', []);

        return parent::getWork();
    }

    /**
     * {@inheritDoc}
     */
    public function setWork(float $work): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setWork', [$work]);

        parent::setWork($work);
    }

    /**
     * {@inheritDoc}
     */
    public function getPerspective(): ?float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPerspective', []);

        return parent::getPerspective();
    }

    /**
     * {@inheritDoc}
     */
    public function setPerspective(float $perspective): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPerspective', [$perspective]);

        parent::setPerspective($perspective);
    }

}
